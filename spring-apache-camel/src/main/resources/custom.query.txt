StringBuilder selectClause = new StringBuilder(
				" select USA.STUDYACCESSID, USA.USERID,USA.STUDYID,USA.ORGID,USA.ISACTIVE,USA.ACCESSDATE,USA.CREATEDBY,USA.CREATEDDT,USA.MODIFIEDDT,USA.MODIFIEDBY, ORG.ORGNAME "
				+ "from TBL_USERRECENTSTUDYACCESS USA "
				+ "INNER JOIN TBL_ORGANIZATION ORG ON ORG.ORGID=USA.ORGID "
				+ "WHERE 1=1");

		if(userId != 0 && userId != null){
			selectClause.append(" AND USA.USERID=").append(userId);				
		}
		if(orgId != null && !orgId.isEmpty()){
			selectClause.append(" AND USA.ORGID=").append(orgId);				
		}
		selectClause.append(" ORDER BY USA.ACCESSDATE DESC");

		StringBuilder query = new StringBuilder().append(selectClause);
		EntityManager manager = getEntityManager();
		Query query1 = manager.createNativeQuery(query.toString());
		int count=0;
		List resultList = query1.getResultList();
		boolean isStudyIdUnique = false;

		List<Long> uniqueStudyIds = new ArrayList<Long>();

		List<UserRecentStudyAccessEntity> entityList = new ArrayList<UserRecentStudyAccessEntity>();
		if (resultList != null && !resultList.isEmpty()) {
			for (Object object : resultList) {
				Object[] data = (Object[]) object;
				UserRecentStudyAccessEntity recentStudy = new UserRecentStudyAccessEntity();
				recentStudy.setStudyaccessid(data[0] != null ? ((BigDecimal) data[0]).longValue() : 0);

				UserProfileEntity upe = new UserProfileEntity();
				upe.setUserId(data[1] != null ? ((BigDecimal) data[1]).longValue() : 0);
				recentStudy.setUserProfile(upe);

				StudyEntity se = new StudyEntity();
				long studyId = data[2] != null ? ((BigDecimal) data[2]).longValue() : 0;

				if(uniqueStudyIds.size() == 0 || !uniqueStudyIds.contains(studyId)){
					uniqueStudyIds.add(studyId);
					isStudyIdUnique = true;
					se.setStudyId(studyId);
				}
				recentStudy.setStudy(se);

				OrganizationEntity o = new OrganizationEntity();
				o.setOrgId(data[3] != null ? ((BigDecimal) data[3]).longValue() : 0);
				//recentStudy.setOrganization(o);

				recentStudy.setIsactive(data[4] != null ? (String) data[4] : null);
				recentStudy.setAccessdate(data[5] != null ? (Date) data[5] : null);
				recentStudy.setCreatedby(data[6] != null ? (String) data[6] : null);
				recentStudy.setCreateddt(data[7] != null ? (Date) data[7] : null);
				recentStudy.setModifieddt(data[8] != null ? (Date) data[8] : null);
				recentStudy.setModifiedby(data[9] != null ? (String) data[9] : null);
				if(isStudyIdUnique && count<=9){
					entityList.add(recentStudy);
					count++;
				}
				
				o.setOrgName(data[10] != null ? (String) data[10] : null);
				recentStudy.setOrganization(o);
				isStudyIdUnique = false;	
			}
		}

		return entityList;